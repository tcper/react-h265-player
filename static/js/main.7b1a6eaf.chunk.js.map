{"version":3,"sources":["ReactH265Player.js","App.js","serviceWorker.js","index.js"],"names":["ReactH265Player","ref","React","createRef","player","window","Player","state","width","props","height","this","passRef","url","bufferSize","isStream","errorHandler","play","current","stop","Component","App","useState","playerRef","setPlayerRef","className","e","console","log","error","status","onClick","resume","pause","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2PAmCeA,E,4MAhCbC,IAAMC,IAAMC,Y,EACZC,OAAS,IAAIC,OAAOC,O,EACpBC,MAAQ,CACNC,MAAO,EAAKC,MAAMD,MAClBE,OAAQ,EAAKD,MAAMC,Q,kEAGD,MAQdC,KAAKF,MALPG,EAHgB,EAGhBA,QAHgB,IAIhBC,WAJgB,MAIV,GAJU,MAKhBC,kBALgB,MAKH,OALG,MAMhBC,gBANgB,SAOhBC,EAPgB,EAOhBA,aAEEJ,GACFA,EAAQD,KAAKP,QAEfO,KAAKP,OAAOa,KAAKJ,EAAKF,KAAKV,IAAIiB,QAASF,EAAcF,EAAYC,K,6CAIlEJ,KAAKP,OAAOe,S,+BAGJ,IAAD,EACmBR,KAAKJ,MAAvBC,EADD,EACCA,MAAOE,EADR,EACQA,OACf,OAAO,4BAAQT,IAAKU,KAAKV,IAAKO,MAAOA,EAAOE,OAAQA,Q,GA7B1BU,aCqCfC,MAnCf,WAAgB,IAAD,EACqBC,mBAAS,MAD9B,mBACNC,EADM,KACKC,EADL,KAGb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CACEjB,MAAM,MAAME,OAAO,MACnBG,IAAI,gBACJC,WAAY,OACZC,UAAU,EACVC,aAAc,SAAAU,GACZC,QAAQC,IAAI,cAAgBF,EAAEG,MAAQ,WAAaH,EAAEI,OAAS,KAC1DJ,EAAEG,OAIRjB,QAAS,SAAAX,GAAG,OAAIuB,EAAavB,MAE7B,6BACE,4BAAQ8B,QAAS,WACfR,EAAUS,WADZ,QAGA,4BAAQD,QAAS,WACfR,EAAUU,UADZ,SAGA,4BAAQF,QAAS,WACfR,EAAUJ,SADZ,YClBQe,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLF,QAAQE,MAAMA,EAAMqB,a","file":"static/js/main.7b1a6eaf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ReactH265Player extends Component {\r\n  ref = React.createRef();\r\n  player = new window.Player();\r\n  state = {\r\n    width: this.props.width,\r\n    height: this.props.height\r\n  };\r\n\r\n  componentDidMount() {\r\n    // console.log(this.ref.current);\r\n    const {\r\n      passRef,\r\n      url = \"\",\r\n      bufferSize = 512 * 1024,\r\n      isStream = false,\r\n      errorHandler\r\n    } = this.props;\r\n    if (passRef) {\r\n      passRef(this.player);\r\n    }\r\n    this.player.play(url, this.ref.current, errorHandler, bufferSize, isStream);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.player.stop();\r\n  }\r\n\r\n  render() {\r\n    const { width, height } = this.state;\r\n    return <canvas ref={this.ref} width={width} height={height}></canvas>;\r\n  }\r\n}\r\n\r\nexport default ReactH265Player;\r\n","import React, { useState }  from 'react';\nimport './App.css';\nimport ReactH265Player from './ReactH265Player'\n\nfunction App() {\n  const [playerRef, setPlayerRef] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ReactH265Player \n          width=\"500\" height=\"500\"\n          url=\"h265_high.mp4\"\n          bufferSize={512 * 1024}\n          isStream={false}\n          errorHandler={e => {\n            console.log(\"play error \" + e.error + \" status \" + e.status + \".\");\n            if (e.error === 1) {\n              // finish\n            }\n          }}\n          passRef={ref => setPlayerRef(ref)} />\n\n          <div>\n            <button onClick={() => {\n              playerRef.resume();\n            }}>play</button>\n            <button onClick={() => {\n              playerRef.pause();\n            }}>pause</button>\n            <button onClick={() => {\n              playerRef.stop()\n            }}>stop</button>\n          </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}